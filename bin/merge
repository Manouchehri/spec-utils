#!/usr/bin/env perl

# Move ACSL specifications and code modifications from sources to sources.
# Copyright (C) <2018> Denis Efremov <efremov@ispras.ru>, ISP RAS
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

use warnings;
use strict;

use re '/aa';
use feature qw(say);

use lib::abs '../lib';

use utf8;

use RE::Common qw($varname);
use File::Slurp qw(read_file write_file);
use Getopt::Long qw(:config gnu_compat no_bundling no_permute no_getopt_compat);
use Pod::Usage;
use Term::ANSIColor qw(:constants);
use File::Temp qw(tempfile);
use Algorithm::Diff qw(traverse_sequences);
use Digest::MD5 qw(md5_hex);

use Configuration qw(switch_system);
use Local::String::Util qw(trim is_blank ne_spaces normalize remove_spaces);
use Local::List::Util qw(str_to_list uniq);
use Local::Terminal qw(window_size);
use C::Util::Transformation qw(adapt restore filter filter_dup restore_macro restore_comments :RE :TYPES);
use GCC::Preprocess qw(preprocess_directives_noincl);
use File::Merge qw(merge);
use File::C::Merge qw(merge_all_files_simple find_all_files);
use ACSL::Common qw(is_acsl_spec);

BEGIN {
   eval {
      require Smart::Comments;
      Smart::Comments->import();
   }
}

=encoding utf8

=pod

=head1 merge

merge - Переложение спецификаций с одной версии исходного кода на другую.

=head1 SYNOPSIS

 merge [options]
 Options:
  -f|--from file|dir    - откуда переносятся спецификации
  -t|--to file|dir      - куда переносятся спецификации
  -s|--skip f1,f2,f3... - пропустить функции f1, f2, f3 ...
  -v|--verbose          - более детальные сообщения
  -m|--manual           - не пытаться переносить спецификации внутри функций автоматически
  --[no-]strict         - осуществлять дополнительные проверки при сопоставлении функций
  -k|--[no-]kdiff       - использовать kdiff3 вместо meld
  -h|--help             - выводит полное описание программы

=head1 OPTIONS

=over 8

=item B<-f|--from file|dir>

Указание на директорию, откуда переносятся спецификации. По умолчанию - текущая директория.

=item B<-t|--to file|dir>

Указание на директорию, куда переносятся спецификации. По умолчанию директория берётся из переменной окружения CURRENT_PROJECT.

=item B<-s|--skip f1,f2,f3...>

Не пытаться перенести спецификации для функций f1, f2, f3 ...

=item B<-v|--verbose>

Увеличивает детальность сообщений. Флаг может использоваться несколько раз. Каждый раз увеличивается количество выводимой информации. Текущий максимальный уровень - 2.

=item B<-m|--manual>

Отключает функциональность по автоматическому переносу спецификаций внутри тел функций. Запускаются kdiff или meld. Включён по умолчанию.

=item B<--[no-]strict>

Осуществлять точное сопоставление по аргументам и возвращаемому результату функций или отключить эти проверки. По умолчанию проверки включены.

=item B<-k|--[no-]kdiff>

Когда программа не в состоянии автоматически переместить спецификации, вызывается внешний инструмент. По умолчанию это программа meld. Опция включает использование программы kdiff3 вместо meld.

=item B<-h|--help>

Выводит данное сообщение.

=back

=head1 DESCRIPTION

Программа считывает спецификации из всех *.[ch] файлов директории --from и её поддиректорий. После пошагово переносит спецификации, прикреплённые к конкретным функциям на эти же функции из файлов директории --to и её поддиректорий. Какая функция в каком конкретном файле располагается не имеет значения. Старые спецификации, если они были, заменяются новыми. Для того, чтобы программа считала спецификацию прикреплённой к функции, необходимо чтобы последняя распологалась перед B<определением> функции. Если несколько спецификаций расположено подряд, то все они считаются прикреплёнными к одной функции.

Если программа не смогла найти функцию, для которой написаны спецификации, то выводится сообщение об ошибке. Работа программы при этом продолжается.

Обычные комментарии к функциям не переносятся. Комментарии внутри спецификаций переносятся.

На последнем этапе функционирования программа выводит в STDERR все спецификации, которые не были перенесены. Чаще всего это спецификации, которые прикреплены не к функциям.

=cut

my $help = 0;
my @module_dir;
my @specs_dir;
my $type;
my $strict     = 1;
my $kdiff      = 0;
my $tr_wh      = 0;
my $verbose    = 0;
my $manual     = 1;
my @skip;

GetOptions(
   'from|f=s'     => \@specs_dir,
   'to|t=s'       => \@module_dir,
   'type=s'       => \$type,
   'skip|s=s{1,}' => \@skip,
   'strict!'      => \$strict,
   'kdiff|k!'     => \$kdiff,
   'manual|m!'    => \$manual,
   'rtw|r!'       => \$tr_wh,        # remove trailing whitespaces
   'verbose|v+'   => \$verbose,
   'help|h'       => \$help,
) or pod2usage(1);

pod2usage({-verbose => 2, -exitval => 0}) if $help;

if ($type) {
   die "Unknown system type $type\n"
      unless switch_system($type);
}

# Default value for from/to arguments
@module_dir = ($ENV{CURRENT_PROJECT} // '')
   unless @module_dir;
@specs_dir = ('.')
   unless @specs_dir;

if (@ARGV) {
   warn "Unknown options '@ARGV'\n";
   pod2usage(1);
}

@skip = split(/,/, join(',', @skip));

foreach (@module_dir, @specs_dir) {
   pod2usage({ -msg => "Can't read file/dir $_.\n", -exitval => 2 })
      unless -r $_;
}

my (undef, $col) = window_size();
my $delimeter = '-' x $col;

#Global variables from C::Util::Transformation
my $comment_re = $comment_t{pattern};
# my $macro_re   = $macro_t{pattern};

sub call_meld
{
   return 1 if $#_ > 2;

   my @template = map {$_ . 'XXXX'} qw(to_ merge_ from_);
   my @f;
   foreach my $i (0 .. $#_) {
      my (undef, $name) = tempfile(TEMPLATE => $template[$i], SUFFIX => '.c');
      push @f, $name;

      write_file($name, @{$_[$i]});
   }

   my $ret;
   if ($kdiff) {
      $ret = system('kdiff3', @f);
   } else {
      $ret = system('meld', @f);
   }

   @{$_[1]} = read_file($f[1])
     unless $ret;

   unlink $f[$_] for 0 .. $#_;

   $ret;
}

# dir
# returns hash ref
sub fetch_module_sources
{
   my @module = find_all_files($_[0]);

   return {}
     unless @module;

   my %module;
   foreach my $f (@module) {
      $module{$f}{code} = read_file($f);
      adapt(
         $module{$f}{code},
         comments => \@{$module{$f}{c}},
         macro    => \@{$module{$f}{m}}
      );

      my %i;
      foreach (0 .. $#{$module{$f}{c}}) {
         $i{$_} = 1 if is_acsl_spec(@{$module{$f}{c}}[$_]);
      }
      $module{$f}{i} = \%i;
   }

   %module;
}

sub fetch_specifications
{
   my $code = merge_all_files_simple($_[0]);

   return {}
     unless $code;

   adapt(
      $code,
      comments => \my @comments,
      macro    => \my @macro
   );

   (
      specs    => \$code,
      comments => \@comments,
      macro    => \@macro
   );
}

sub restore_specs_only ($$$)
{
   if (wantarray) {
      my @res;
      $_[0] =~ s/$comment_re/if (exists $_[2]->{$1}) {push @res, $1; $_[1]->[$1]} else {${^MATCH}}/egp;
      return @res;
   } else {
      $_[0] =~ s/$comment_re/if (exists $_[2]->{$1}) {$_[1]->[$1]} else {${^MATCH}}/egp;
      return undef;
   }
}

sub restore_comments_only ($$$)
{
   $_[0] =~ s/$comment_re/if (exists $_[2]->{$1}) {${^MATCH}} else {$_[1]->[$1]}/egp;
}

sub get_comments_ids ($)
{
   my @res;

   push @res, $1 while $_[0] =~ m/$comment_re/g;

   @res;
}

sub get_specs_ids ($$)
{
   my @res;

   while ($_[0] =~ m/$comment_re/g) {
      push @res, $1
        if exists $_[1]->{$1};
   }

   @res;
}

sub contains_specs
{
   if ($_[0]) {
      while ($_[0] =~ m/$comment_re/g) {
         return 1
           if exists $_[1]->{$1};
      }
   }

   0;
}

sub check_functions_compliance
{
   my $res = 0;

   if (ne_spaces(filter_dup($_[0]->{args}), filter_dup($_[1]->{args}))) {
      $res = 1;
   }

   if (ne_spaces(filter_dup($_[0]->{ret}), filter_dup($_[1]->{ret}))) {
      $res = 2;
   }

   $res;
}

my %index;

sub upd_merge_index
{
   # $file $begin $len $code
   $index{$_[0]}{$_[1]}{length} = $_[2];
   $index{$_[0]}{$_[1]}{code}   = $_[3];
}

sub move_specs
{
   my ($cm, $spec, $sp_index) = @_;
   my $fret = $cm->{ret};
   my ($begin, $len) = @{$cm->{ret_idx}};

   my @interval;
   my $continue = 0;
   my ($cb, $ce) = (0, 0);

   while ($fret =~ m/$comment_re/g) {
      my ($b, $e) = ($-[0], $+[0]);
      if (exists $sp_index->{$1}) {
         $cb = $b
           unless $continue;

         $ce       = $e + 1;
         $continue = 1;
      } else {
         push @interval, [$cb, $ce];
         $continue = 0;
      }
   }
   push @interval, [$cb, $ce]
     if $continue;

   my $offset = 0;
   foreach (@interval) {
      my $len = $_->[1] - $_->[0];
      substr($fret, $offset + $_->[0], $len, '');
      $offset -= $len;
   }
   $fret =~ s/\b(?=[a-zA-Z_])/$spec/;

   upd_merge_index($cm->{file}, $begin, $len, $fret);
}

sub move_pre_function_specs
{
   my @exclude_specs;

   if ($_[0] =~ m/($comment_re(\s*+$comment_re)*+)[^${C::Util::Transformation::special_symbols}]*\Z/s) {
      my $spec = $1;

      push @exclude_specs, restore_specs_only($spec, $_[1], $_[2]);
      filter $spec;
      unless (is_blank $spec) {
         $spec = trim $spec;
         $spec .= "\n";

         move_specs($_[3], $spec, $_[4]);
      }
   }

   @exclude_specs;
}

### Fetching specifications from files/dirs: @specs_dir
my %specs = fetch_specifications(\@specs_dir);
die(RED . "Can't find specifications sources." . RESET . "\n")
  unless %specs;

### Fetching module sources from files/dirs: @module_dir
my %module = fetch_module_sources(\@module_dir);
die(RED . "Can't find module sources." . RESET . "\n")
  unless %module;

$specs{specs} = preprocess_directives_noincl($specs{specs});

my @comments = @{$specs{comments}};
my @macro    = @{$specs{macro}};
my $code     = ${$specs{specs}};

my %acsl_specs;
### detecting specifications
foreach (0 .. $#comments) {
   if (is_acsl_spec($comments[$_])) {
      $acsl_specs{$_} = 1;
      $comments[$_] =~ s/\s+$//mg
        if $tr_wh;
   }
}

my %from;
my %to;
{
   my $special_chars = join('', uniq(@comment_t{qw/L R/}));
   my $ret           = qr/(?<ret>[\w${special_chars}][\w\s\*${special_chars}]+)/;
   my $name          = qr/(?<name>$varname)/;
   my $args          = qr'(?>(?<args>\((?:(?>[^\(\)]+)|(?&args))*\)))';
   my $body          = qr'(?>(?<body>\{(?:(?>[^\{\}]+)|(?&body))*\}))';
   my $func_re       = qr/$ret${s}*+\b$name${s}*+$args${s}*+(?:$body|;)/;
   my $skip_func     = qr/else|return|(?:\A${s}++\z)/;

   while ($code =~ m/$func_re/g) {
      my ($name, $ret, $args, $body) = @+{qw(name ret args body)};
      next if $ret =~ $skip_func;

      my @specs_ids = get_specs_ids($ret, \%acsl_specs);
      push @specs_ids, get_specs_ids($body, \%acsl_specs)
        if $body;

      if (@specs_ids) {
         if (exists $from{$name}) {
            delete @acsl_specs{@specs_ids};
            print BLUE . "Specifications for function $name have been already parsed: ignoring." . RESET . "\n";
            if ($verbose > 1) {
               print join("\n", map {$comments[$_]} sort {$a <=> $b} @specs_ids) . "\n";
            }
         } else {
            $from{$name}{ret}  = $ret;
            $from{$name}{args} = $args;

            $from{$name}{body} = $body
              if $body;
         }
      }
   }

   #Most efficient way to do this.
   delete @from{@skip};

   foreach (keys %module) {
      while ($module{$_}{code} =~ m/$func_re/g) {
         my ($name, $ret, $args, $body) = @+{qw(name ret args body)};
         my $exists_body = exists $+{body};
         next if $ret =~ $skip_func;

         if (exists $from{$name} && !exists $to{$name}) {
            if ($exists_body == exists $from{$name}{body}) {
               if ($exists_body) {
                  $to{$name}{body_idx} = [$-[4], $+[4] - $-[4]];
                  $to{$name}{body} = $body;
               } else {
                  next
                    unless contains_specs $ret, $module{$_}{i};
               }

               $to{$name}{file} = $_;

               $to{$name}{ret_idx} = [$-[1], $+[1] - $-[1]];
               $to{$name}{ret}     = $ret;
               $to{$name}{args}    = $args;
            }
         }
      }
   }
}

foreach (keys %from) {
   next unless exists $to{$_};

   my $cs   = $from{$_};
   my $cm   = $to{$_};
   my $file = $cm->{file};

   #additional checks
   if ($strict) {
      if (my $c = check_functions_compliance($cs, $cm)) {
         if ($c == 1) {
            warn "$file: " . RED . 'arguments' . RESET . " of function " . GREEN . $_ . RESET . " doesn't match.\n";
         } elsif ($c == 2) {
            warn "$file: " . RED . 'return type' . RESET . " of function " . GREEN . $_ . RESET . " doesn't match.\n";
         }
         next;
      }
   }

   restore_comments_only($cs->{ret}, \@comments, \%acsl_specs);
   my @exclude_specs =
     move_pre_function_specs($cs->{ret}, \@comments, \%acsl_specs, $cm, $module{$file}{i});

   if ($cs->{body}) {
      my $fbody_saved = $cs->{body};

      restore_macro($cs->{body}, \@macro);
      restore_comments_only($cs->{body}, \@comments, \%acsl_specs);

      restore_macro($cm->{body}, $module{$file}{m});
      restore_comments_only($cm->{body}, $module{$file}{c}, $module{$file}{i});

      my $new_code = str_to_list $cs->{body};
      my $old_code = str_to_list $cm->{body};
      my @code;

      my $cant_resolve = 0;
      my $only_blank   = 1;

      traverse_sequences(
         $old_code,
         $new_code,
         {
            MATCH     => sub {push @code, @$new_code[$_[1]]},
            DISCARD_A => sub {push @code, @$old_code[$_[0]]},
            DISCARD_B => sub {
               my $line = @$new_code[$_[1]];
               if ($line =~ m/^(?:\s++|$comment_re)*$/) {
                  push @code, $line;
                  $only_blank &&= is_blank($line);
               } elsif ($line =~ m/$comment_re/) {
                  $cant_resolve = 1;
                  push @code, $line;
               } else {
                  $cant_resolve = 1;
               }
            }
         },
         sub {
            $_[0] =~ s/\s++|$comment_re//gr;
         }
      );
      $only_blank &&= !$cant_resolve;

      if ($only_blank) {
         $code = join('', @$old_code);
         # comments have been already restored
         restore_specs_only($code, $module{$file}{c}, $module{$file}{i});
         push @exclude_specs, get_comments_ids(join('', @code));
         $code = str_to_list($code);
      } else {
         $code = join('', @code);
         # comments have been already restored
         push @exclude_specs, restore_specs_only($code, \@comments, \%acsl_specs);
         $code = str_to_list($code);
      }

      if ($cant_resolve || ($manual && !$only_blank)) {
         my $function = $cm->{ret} . ' ' . $_ . $cm->{args};
         filter($function);
         $function = normalize($function) . "\n";

         $old_code = join('', @$old_code);
         restore_comments($old_code, $module{$file}{c});
         $old_code = str_to_list($old_code);
         restore_comments($fbody_saved, \@comments);
         $new_code = str_to_list($fbody_saved);

         unshift @$old_code, $function;
         unshift @$new_code, $function;
         unshift @$code,     $function;

         if (call_meld($old_code, $code, $new_code)) {
            warn "Problems calling "
              . RED
              . ($kdiff ? 'kdiff3' : 'meld')
              . RESET
              . ". Note, that changes in function '"
              . GREEN
              . $_
              . RESET
              . "' will be merged anyway.\n";
         }

         my $check = shift @$code;
         warn "Changes in string '" . GREEN . substr($check, 0, -1) . RESET . "' will not be merged.\n"
           if $check ne $function;
      }
      upd_merge_index($file, @{$cm->{body_idx}}, join('', @$code));
   }

   delete @acsl_specs{@exclude_specs};
}

foreach my $file (keys %index) {
   my $offset = 0;
   foreach my $pos (sort {$a <=> $b} keys %{$index{$file}}) {
      substr($module{$file}{code}, $pos + $offset, $index{$file}{$pos}{length}, $index{$file}{$pos}{code});
      $offset += length($index{$file}{$pos}{code}) - $index{$file}{$pos}{length};
   }
}

foreach my $f (keys %module) {
   restore($module{$f}{code}, comments => $module{$f}{c}, macro => $module{$f}{m});
   write_file($f, $module{$f}{code});
}

### Non-transferred specifications analysis
{
   my %non_transferred_hash;
   foreach (keys %acsl_specs) {
      $non_transferred_hash{md5_hex(remove_spaces($comments[$_]))} = $_;
   }

   my %existed_hash;
   foreach my $file (keys %module) {
      foreach my $id (keys %{$module{$file}{i}}) {
         $existed_hash{md5_hex(remove_spaces($module{$file}{c}[$id]))} = undef;
      }
   }

   my @eq;
   foreach (keys %non_transferred_hash) {
      push @eq, $non_transferred_hash{$_}
        if exists $existed_hash{$_};
   }

   delete @acsl_specs{@eq};
   if ($verbose) {
      print BLUE . "Following specifications already exists in code. Ignoring.\n" . RESET;
      print join("\n" . BLUE . $delimeter . RESET, map {$comments[$_]} sort {$a <=> $b} @eq) . "\n";
      print "\n\n";
   }
}

if (keys %acsl_specs) {
   warn RED, "Can't merge following specifications:" . RESET . "\n\n";
   warn join("\n" . RED . $delimeter . RESET, map {$comments[$_]} sort {$a <=> $b} keys %acsl_specs) . "\n";
}

