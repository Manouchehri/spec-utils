#!/usr/bin/env perl

use warnings;
use strict;

use feature qw(say);

use utf8::all;

use Graph;
use Graph::Writer::Dot;
use List::Util qw(min);
use File::Which;
use File::Slurp qw(write_file);
use Getopt::Long qw(:config gnu_compat no_bundling no_permute no_getopt_compat);

use lib::abs '../lib';

use C::Util::Transformation;
use Local::List::Util qw(any);
use Kernel::Common qw(check_kernel_dir autodetect_kernel_directory);
use Kernel::Module qw(preprocess_module_sources_nocomments);
use Kernel::Module::Graph qw(build_sources_graph);

use C::FunctionSet;

BEGIN {
   eval {
      require Smart::Comments;
      Smart::Comments->import();
   }
}


my $module_dir;
my $kernel_dir;
my $direct   = 1;
my $indirect = 1;
my $exact_module = undef;

GetOptions(
   'module|m=s'  => \$module_dir,
   'kernel|k=s'  => \$kernel_dir,
   'mname=s'     => \$kernel_dir,
   'direct|d!'   => \$direct,
   'indirect|i!' => \$indirect,
) or die("Wrong usage.\n");

die("Kernel directory is not properly specified.\n") unless check_kernel_dir $kernel_dir;
die("Module directory is not properly specified.\n") unless -d $module_dir;
die("Nothing to search for.\n") if !$direct && !$indirect;

### KERNEL DIRECTORY: $kernel_dir
### MODULE DIRECTORY: $module_dir


#Initializing the library
Kernel::Module::Graph::init(reverse => 1);


my $source = (preprocess_module_sources_nocomments($kernel_dir, $module_dir, $exact_module, ["#define SPECIFICATION 1\n"]))[1];
adapt($$source, attributes => 1);

#funcs init
my %sources;
$sources{module}{function} = C::FunctionSet->parse($source, 'module');
my $graph = build_sources_graph(\%sources);

my @dot;
while ($graph->has_a_cycle) {
   my @cycle = $graph->find_a_cycle;
   my $g = Graph::Directed->new(edges =>
         [ grep { any($_->[0], \@cycle) && any($_->[1], \@cycle) } $graph->edges ]
   );

   my $allow = 0;
   my @edge;
   if (@cycle > 1) {
      @edge = @cycle[0,1];
      $allow = $indirect;
   } else {
      @edge = @cycle[0,0];
      $allow = $direct;
   }

   if ($allow) {
      push @dot, '';
      open my $fh, '>', \$dot[-1];
      {
      local $SIG{__WARN__} = sub {};
         Graph::Writer::Dot->new()->write_graph(
            Graph::Directed->new(edges =>,
               [ map {
                       [ $graph->get_vertex_attribute($_->[0], 'object')->name,
                         $graph->get_vertex_attribute($_->[1], 'object')->name
                       ]
                     } $g->edges
               ]),
            $fh);
      }
      close $fh;
   }

   $graph->delete_edge(@edge);
}

my $i = 0;
foreach (@dot) {
   print "Output: out$i.dot out$i.svg\n";
   write_file("out$i.dot", $_);
   system('dot', "-Tsvg", "out$i.dot", "-oout$i.svg");
   ++$i;
}

__END__
if (which('dot')) {
   #fork and exit;
   my $output = "${out}.${format}";
   system('dot', "-T${format}", "${out}.dot", "-o${output}");
} else {
}


__END__

my $num = $cycle->vertices;
if ($num > 1 && $indirect || $num == 1 && $direct) {
   local $SIG{__WARN__} = sub {};
   Graph::Writer::Dot->new()->write_graph($cycle, \*STDOUT)
}


