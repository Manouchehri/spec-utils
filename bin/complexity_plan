#!/usr/bin/env perl

# Program for analysing kernel module functions complexity.
# Copyright (C) <2018> Denis Efremov <efremov@ispras.ru>, ISP RAS
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

use v5.20;
use feature qw/say signatures state/;
use strict;
use warnings;
no warnings qw/experimental::signatures/;

use utf8::all;
use File::Temp qw/tempdir/;
use XML::Simple;
use IO::Interactive;
use Text::ANSITable;
use Class::CSV;
use File::Which;
use YAML::XS qw/LoadFile/;
use Getopt::Long;
use File::Slurp qw/write_file/;
use Excel::Writer::XLSX;
use Color::Library;
use DBI;

use lib::abs '../lib';
use Local::List::Util qw/uniq/;
use C::FunctionSet;
use Kernel::Module::Graph qw/build_sources_graph/;
use Kernel::Module qw/preprocess_module_sources/;
use C::Util::Transformation;
use Local::Config qw/find_config load_config merge_config_keys/;
use Local::Config::Format qw/check_priority_format check_status_format/;

unless (which('lizard')) {
   die "Please, install lizard python package. This program required to measure SLOC and CCN.\n";
}

my $modified      = 0;          #Calculate modified cyclomatic complexity number
my $output_format = 'table';    # table csv excel sqlite
my %config_file = (status => find_config('status'), priority => find_config('priority'));
my $output_file = undef;
my $force       = 0;
my ($kernel, $module) = @ENV{qw/CURRENT_KERNEL CURRENT_PROJECT/};
my $exact_module = undef;

GetOptions(
   "modified!"                  => \$modified,
   "kernel|k=s"                 => \$kernel,
   "module|m=s"                 => \$module,
   "mname=s"                    => \$exact_module,
   "force!"                     => \$force,
   "conf-status|status|s=s"     => \$config_file{status},
   "conf-priority|priority|p=s" => \$config_file{priority},
   "format|f=s"                 => \$output_format,
   "output|o=s"                 => \$output_file,
) or die("Error in command line arguments\n");

die "Please, provide valid path to kernel.\n"
  unless -d $kernel;
die "Please, provide valid path to module.\n"
  unless -d $module;

my $conf_status = load_config($config_file{status});
die("Can't read status config file.\n")
  unless $conf_status;
die("Wrong file format.\n")
  unless check_status_format($conf_status);

my $conf_priority = load_config($config_file{priority});
die("Can't read priority config file.\n")
  unless $conf_priority;
die("Wrong file format.\n")
  unless check_priority_format($conf_priority);
my $config;
merge_config_keys $config, $conf_status;
merge_config_keys $config, $conf_priority;

unless ($output_format eq 'table' || $output_format eq 'csv' || $output_format eq 'excel' || $output_format eq 'sqlite')
{
   die "Format $output_format is not supported by the programm.\n";
}

if (($output_format eq 'excel' || $output_format eq 'sqlite') && !defined $output_file) {
   die "Can't write $output_format file to STDIN. Please, use --output argument.\n";
}

if ($output_file && -f $output_file && !$force) {
   die "File $output_file already exists in the file system. If you want to overwrite, use --force option.\n";
}

#BEGIN OF A PROGRAM
my $preprocessed = get_preprocessed_sources($kernel, $module, $exact_module);

#Initializing the library
Kernel::Module::Graph::init(human_readable => 1);

my $graph = build_graph($preprocessed);
$graph = mark_priorities($graph, $config);
$graph = resolve_function_function_cycles($graph);
$graph = mark_levels($graph);
my $metrics = create_table($graph, $preprocessed, $modified, $config);

# filter out __inittest and __check_enabled
delete $metrics->{__inittest};
delete $metrics->{__check_enabled};

if ($output_format eq 'sqlite') {
   my $dbh = sqlite_connect($output_file);
   sqlite_init_table($dbh);
   insert_to_database($dbh, $metrics);
} else {
   gather_statistics($metrics);

   output_plan(prepare_output_document($output_format, $output_file, $config), $metrics);
}
##END OF A PROGRAM

sub get_preprocessed_sources ($kernel, $module, $exact_module)
{
   my $source = (preprocess_module_sources($kernel, $module, $exact_module, ["#define SPECIFICATION 1\n"]))[1];
   adapt($$source, map {$_ => 1} qw/strings comments macro attributes/);
   $$source;
}

# args $_[0] - preprocessed file
sub get_metrics
{
   my $modified = pop;
   #creating temp file
   my $tempdir = tempdir(TMPDIR => 1, CLEANUP => 1);
   open my $fh, '>', "$tempdir/sources.c";
   print $fh $_[0];
   close $fh;

   #calling lizard
   my $lizard_call = 'lizard -X ' . ($modified ? ' -m ' : '') . $tempdir;
   my $xml         = qx!$lizard_call!;
   my $xs          = XML::Simple->new();
   my $ref         = $xs->XMLin($xml);
   my $items       = $ref->{measure}[0]{item};
   my %metrics;
   foreach (keys %$items) {
      my $name = ($_ =~ m/(^[^\(]++)/)[0];
      my @value = @{$items->{$_}{value}}[1, 2];
      $metrics{$name} = {SLOC => $value[0], CCN => $value[1]};
   }

   \%metrics;
}

# args $_[0] - preprocessed file
sub build_graph
{
   my %sources;
   $sources{module}{function} = C::FunctionSet->parse(\$_[0], 'module');

   build_sources_graph(\%sources);
}

sub mark_priorities ($graph, $config)
{
   while (my ($i, $list) = each @{$config->{priority}{lists}}) {
      foreach (uniq @$list) {
         if ($graph->has_vertex($_)) {
            unless ($graph->has_vertex_attribute($_, 'priority')) {
               $graph->set_vertex_attribute($_, priority => $i + 1);
            }
            foreach ($graph->all_predecessors($_)) {
               unless ($graph->has_vertex_attribute($_, 'priority')) {
                  $graph->set_vertex_attribute($_, priority => $i + 1);
               }
            }
         } else {
            warn "Priority list: there is no such function '$_' in sources.\n";
         }
      }
   }

   $graph;
}

sub resolve_function_function_cycles($graph)
{
   while ($graph->has_a_cycle) {
      my @cycle = $graph->find_a_cycle();
      if (@cycle == 1) {
         $graph->delete_edge(@cycle[0, 0]);
      } else {
         $graph->delete_edge(@cycle[0, 1]);
      }
   }

   $graph;
}

sub mark_levels($graph)
{
   my %vertices = map {$_ => undef} $graph->vertices;
   my %vd = map {($_, $graph->in_degree($_))} keys %vertices;
   my $level = 1;
   while (%vertices) {
      my @zv;

      foreach (keys %vertices) {
         push @zv, $_ if 0 == $vd{$_};
      }

      unless (@zv) {
         die "There is no possibility to continue. Cycle.\n";
         last;
      }

      $graph->set_vertex_attribute($_, level => $level) foreach @zv;

      --$vd{$_->[1]} foreach $graph->edges_from(@zv);
      delete @vertices{@zv};
      $level++;
   }

   $graph;
}

sub create_table ($graph, $preprocessed, $modified, $config)
{
   my $metrics = get_metrics($preprocessed, $modified);

   my %done    = map {$_ => 'доказана'} @{$config->{done}};
   my %lemma   = map {$_ => 'доказана без лемм'} @{$config->{'lemma-proof-required'}};
   my %partial = map {$_ => 'частичная спецификация'} @{$config->{'partial-specs'}};
   my %specs   = map {$_ => 'недоказуемо'} @{$config->{'specs-only'}};
   my %status = (%done, %lemma, %partial, %specs);

   my %vertices = map {$_ => undef} $graph->vertices;

   foreach (keys %vertices) {
      my $obj = $graph->get_vertex_attribute($_, 'object');
      my @calls        = grep {!m/^__builtin/} @{$obj->calls};                       # filter builtin compiler functions
      my @module_calls = grep {exists $vertices{$_}} @calls;
      my @kernel_calls = grep {!exists $vertices{$_}} @calls;
      my @args         = grep {!m/^void$/} split /,/, $obj->args =~ s/[)(\s]++//gr;

      $metrics->{$_}{code} = $obj->to_string(undef, 0, 1);
      $metrics->{$_}{priority} = $graph->get_vertex_attribute($_, 'priority');
      $metrics->{$_}{level}    = $graph->get_vertex_attribute($_, 'level');
      $metrics->{$_}{status}   = $status{$_} // '';
      $metrics->{$_}{module_calls} = scalar @module_calls;
      $metrics->{$_}{kernel_calls} = scalar @kernel_calls;
      $metrics->{$_}{args}         = scalar @args;
   }

   $metrics;
}

sub _weight
{
   my ($args, $sloc, $ccn, $kernel_calls, $module_calls) = @_;

   0.2 * $args + ($sloc * 0.3 + $ccn) + ($kernel_calls * 0.5 + $module_calls) * 0.4;
}

sub generate_sort_function
{
   my $metrics = $_[0];

   sub {
      my $la = $metrics->{$a}{level};
      my $lb = $metrics->{$b}{level};
      my $pa = $metrics->{$a}{priority} || 10000;
      my $pb = $metrics->{$b}{priority} || 10000;

      my $wa = _weight(@{$metrics->{$a}}{qw/args SLOC CCN kernel_calls module_calls/});
      my $wb = _weight(@{$metrics->{$b}}{qw/args SLOC CCN kernel_calls module_calls/});

      $pa <=> $pb
        || $la <=> $lb
        || $wa <=> $wb;
     }
}

sub prepare_output_document ($output_format, $output_file, $config)
{
   my $column_names = [
      '№', 'Имя', 'Аргументы', 'SLOC', 'CCN',
      'Вызвано функций ядра',
      'Вызвано функций модуля',
      'Приоритет',
      'Уровень в иерархии',
      'Статус верификации'
   ];
   my $obj;
   my $addfunc;
   my $retfunc;
   my $outfunc = sub {
      if ($output_file) {
         write_file($output_file, {binmode => ':utf8'}, $_[0]);
      } else {
         print $_[0];
      }
   };

   if ($output_format eq 'table') {
      my $t = Text::ANSITable->new;
      $t->border_style('Default::bold');
      if (IO::Interactive::is_interactive() && !$output_file) {
         $t->color_theme('Default::default_gradation');
      } else {
         $t->color_theme('Default::no_color');
      }

      $t->columns($column_names);
      $t->set_column_style('№',                      pad   => 0);
      $t->set_column_style('Имя',                    align => 'left');
      $t->set_column_style('Аргументы',              align => 'middle');
      $t->set_column_style('SLOC',                   align => 'middle');
      $t->set_column_style('CCN',                    align => 'middle');
      $t->set_column_style('Вызвано функций ядра',   align => 'middle');
      $t->set_column_style('Вызвано функций модуля', align => 'middle');
      $t->set_column_style('Приоритет',              align => 'middle');
      $t->set_column_style('Уровень в иерархии',     align => 'middle');
      $t->set_column_style('Статус верификации',     align => 'middle');

      $obj     = $t;
      $addfunc = \&Text::ANSITable::add_row;
      $retfunc = \&Text::ANSITable::draw;
   } elsif ($output_format eq 'csv') {
      my $csv = Class::CSV->new(
         fields         => $column_names,
         line_separator => "\r\n",
         csv_xs_options => {
            sep_char => ';',
         },
      );

      $obj     = $csv;
      $addfunc = \&Class::CSV::add_line;
      $retfunc = \&Class::CSV::string;
      $addfunc->($obj, $column_names);
   } elsif ($output_format eq 'excel') {
      shift @$column_names;
      my $workbook    = Excel::Writer::XLSX->new($output_file);
      my $center      = $workbook->add_format(align => 'center');
      my $left        = $workbook->add_format(align => 'left');
      my $heading     = $workbook->add_format(align => 'center', bold => 1, bg_color => 'silver', underline => 1);
      my $warning     = $workbook->add_format(bold => 1, color => 'red', align => 'center');
      my @colors      = map {$config->{priority}{colors}{$_}} @{$config->{priority}{lists}};
      my @color_codes = map {$_->html} Color::Library->colors(@colors);
      my @formats     = map {$workbook->add_format(align => 'center', bg_color => $_)} @color_codes;

      my $worksheet = $workbook->add_worksheet('Verification Plan');
      while (my ($i, $value) = each @$column_names) {
         $worksheet->write(0, $i, $value, $heading);
      }
      $worksheet->set_column(0, 0, 30, $left);      # NAME
      $worksheet->set_column(1, 0, 10, $center);    # Arguments
      $worksheet->set_column(2, 0, 5,  $center);    # SLOC
      $worksheet->set_column(3, 0, 5,  $center);    # CCN
      $worksheet->set_column(4, 0, 20, $center);    # KCalls
      $worksheet->set_column(5, 0, 22, $center);    # MCalls
      $worksheet->set_column(6, 0, 10, $center);    # Priority
      $worksheet->set_column(7, 0, 17, $center);    # Level
      $worksheet->set_column(8, 0, 17, $center);    # Status

      $obj = $worksheet;
      my $row_iter = 1;
      $addfunc = sub {
         shift @{$_[1]};
         $_[0]->write($row_iter, 0, $_[1]->[0]);
         $_[0]->write($row_iter, 1, $_[1]->[1]);
         $_[0]->write($row_iter, 2, $_[1]->[2]);
         $_[0]->write($row_iter, 3, $_[1]->[3], $_[1]->[3] > 15 ? $warning : ());
         $_[0]->write($row_iter, 4, $_[1]->[4]);
         $_[0]->write($row_iter, 5, $_[1]->[5]);
         $_[0]->write($row_iter, 6, $_[1]->[6], defined $_[1]->[6] ? $formats[$_[1]->[6] - 1] : ());
         $_[0]->write($row_iter, 7, $_[1]->[7]);
         $_[0]->write($row_iter, 8, $_[1]->[8]);
         $row_iter++;
      };
      $retfunc = sub { };
      $outfunc = sub {$workbook->close()};
   } else {
      die "Program doesn't have support for output format $output_format.\n";
   }

   ($obj, $addfunc, $retfunc, $outfunc);
}

sub gather_statistics($metrics)
{
   my ($total_sloc, $done_sloc);
   my @columns;
   my @rows;    #my %stat_types;
   my %done_in_prio;
   my %sloc_in_prio;
   my %ccn_in_prio;
   foreach (keys %$metrics) {
      my $m    = $metrics->{$_};
      my $prio = $m->{priority};
      $prio //= "без приоритета";
      my $status = $m->{status};
      my $sloc   = $m->{SLOC};
      my $ccn    = $m->{CCN};

      my $ref = \%{$done_in_prio{$prio}};
      $ref->{total}++;
      if ($status) {
         $ref->{status}{$status}++;
         #$stat_types{$status}++;
      }

      $ref = \%{$sloc_in_prio{$prio}};
      $ref->{total} += $sloc;
      if ($status) {
         $ref->{status}{$status} += $sloc;
      }

      $ref = \%{$ccn_in_prio{$prio}};
      $ref->{total} += $ccn;
      if ($status) {
         $ref->{status}{$status} += $ccn;
      }
   }

   sub output_stat ($head, $in_prio)
   {
      my $cross_prio_total   = 0;
      my $cross_prio_remains = 0;
      my %cross_prio_status;
      foreach (sort keys %$in_prio) {
         print "Приоритет: $_\n";
         print "\t$head " . $in_prio->{$_}{total} . "\n";
         $cross_prio_total += $in_prio->{$_}{total};
         my $remains = $in_prio->{$_}{total};
         foreach my $s (keys %{$in_prio->{$_}{status}}) {
            my $n = $in_prio->{$_}{status}{$s};
            $remains -= $n;
            $cross_prio_status{$s} += $n;
            print "\tИз них в статусе '" . $s . "': $n\n";
         }
         print "\tОсталось: " . $remains . "\n";
         $cross_prio_remains += $remains;
      }
      print "По всему модулю: $cross_prio_total\n";
      foreach (sort keys %cross_prio_status) {
         print ucfirst($_) . ": $cross_prio_status{$_}\n";
      }
      print "Осталось: $cross_prio_remains\n";
      print "\n";
   }

   output_stat "Всего функций: ",    \%done_in_prio;
   output_stat "Всего строк кода: ", \%sloc_in_prio;
   output_stat "Полная сложность: ", \%ccn_in_prio;
}

sub output_plan ($obj, $addfunc, $retfunc, $outfunc, $metrics)
{
   my $counter       = 1;
   my $sort_function = generate_sort_function($metrics);
   foreach (sort $sort_function keys %$metrics) {
      $addfunc->(
         $obj, [$counter++, $_, @{$metrics->{$_}}{qw/args SLOC CCN kernel_calls module_calls priority level status/}]
      );
   }

   $outfunc->($retfunc->($obj));
}

sub sqlite_init_table
{
   my $table = <<'END_SQL';
CREATE TABLE IF NOT EXISTS astraver_functions (
  name         TEXT NOT NULL PRIMARY KEY,
  code         TEXT NOT NULL,
  args         INTEGER NOT NULL,
  CCN          INTEGER NOT NULL,
  kernel_calls INTEGER NOT NULL,
  module_calls INTEGER NOT NULL,
  level        INTEGER NOT NULL,
  priority     INTEGER,
  SLOC         INTEGER NOT NULL,
  status       TEXT
)
END_SQL

   $_[0]->do($table);
}

sub sqlite_connect
{
   my ($dbfile) = @_;
   my $dsn      = "dbi:SQLite:dbname=" . $dbfile;
   my $dbh      = DBI->connect(
      $dsn, '', '',
      {
         PrintError       => 0,
         RaiseError       => 1,
         AutoCommit       => 1,
         FetchHashKeyName => 'NAME_lc',
      }
   ) or die "$DBI::errstr\n";

   return $dbh;
}

sub insert_to_database
{
   my ($dbh, $metrics) = @_;
   my @order = qw/name
     code
     args
     CCN
     kernel_calls
     module_calls
     level
     priority
     SLOC
     status/;

   state $ins_sth = $dbh->prepare(
      qq/
      INSERT OR REPLACE INTO astraver_functions (/
        . join(',', @order) . qq/) VALUES (/ . join(',', ('?') x @order) . ');'
   );

   $ins_sth->execute($_, @{$metrics->{$_}}{@order[1 .. $#order]}) foreach keys %$metrics;
}
