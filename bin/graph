#!/usr/bin/env perl

# Callgraph for kernel module.
# Copyright (C) <2018> Denis Efremov <efremov@ispras.ru>, ISP RAS
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

use warnings;
use strict;

use feature qw(say state);

use utf8::all;

use Pod::Usage;
use File::Spec::Functions qw(catfile catdir);
use Getopt::Long qw(:config gnu_compat no_bundling no_permute no_getopt_compat);
use File::Which;
use FindBin;

use lib::abs '../lib';

use Local::Config qw(find_config load_config merge_config_keys);
use Local::Config::Format qw(check_issues_format check_priority_format check_status_format);
use Kernel::Common qw(check_kernel_dir autodetect_kernel_directory);
use App::Graph;

BEGIN {
   eval {
      require Smart::Comments;
      Smart::Comments->import();
   }
}

=encoding utf8

=pod

=head1 graph

graph - построить граф вызовов функций модуля ядра Linux

Для полноценной работы требуется программа dot из пакета graphviz.

=head1 SYNOPSIS

 graph [options]

 Options:
  -m|--module dir          - директория с исходными кодами модуля
                             (default: CURRENT_PROJECT)

  -k|--kernel dir          - директория с исходными кодами ядра
                             (default: CURRENT_KERNEL)

  --mname name             - имя модуля из директории --module
                             (e.g. fat vfat msdos)

  --conf-priority file     - конфигурационный файл приоритетов file
                             (default: .priority.conf)
  --conf-status   file     - конфигурационный файл статуса file
                             (default: .status.conf)
  --conf-issues   file     - конфигурационный файл проблем file
                             (default: .issues.conf)

  -p|--preprocessed name   - файл с препроцессированным кодом модуля

  --[no-]cache             - [не]использовать сохранённые результаты обработки
                             исходных кодов
                             (default: off)

  --renew-cache            - обновить кэш и выйти
  --format fmt             - формат карты
                             (default: svg)

  -o|--output name         - имя (без расширения) для карты и .dot файла
                             (default: graph)

  -f|--functions f1 -f f2 ...
  -f|--functions f1,f2,...
  -f|--functions f1 f2 ... - строить граф от функций f1 f2 ...

  -r|--[no-]reverse        - строить карту от указанных функций вверх

  -l|--level <num>         - отобразить на карте только функции приоритета num

  --[no-]priority          - отмечает на карте очереди приоритетов
                             (default: on)
  --[no-]done              - отмечает на карте проверифицированные функции
                             (default: on)
  --[no-]display-done      - не отображать на карте проверифицированные функции
                             (default: off)
  --from-done              - строить граф от проверифицированных функций
  -i|--[no-]issues         - помечает на карте issues
                             (default: off)
  --[no-]priority-legenda  - отображать на карте табличку приоритетов
                             (default: on
  --[no-]issues-legenda    - отображать на карте табличку проблем
                             (default: on
  --[no-]legenda           - регилирует совместно поведение двух прошлых опций
                             (default: on)

  -a|--[no-]mark-anyway    - помечать функции из списка приоритетов в любом случае
                             (default: off)

  -v|--[no-]view           - открыть в программе для просмотра изображений
                             созданную карту
                             (default: on)
  --open-with exec         - использовать программу exec для просмотра карты
                             (default: xdg-open)
  --[no-]async             - запускать внешние программы в асинхронном режиме
                             (default: on)
  --[no-]keep-dot          - сохранять dot файл
                             (default: off)
  -h|--help                - выводит полное описание программы

=head1 OPTIONS

=over 8

=item B<-m|--module dir>

Указание на директорию, где расположены исходные коды модуля ядра. По умолчанию директория берётся из переменной окружения I<CURRENT_PROJECT> если она задана, иначе используется текущая директория. Данные исходные коды в дальнейшем будут препроцессированы с директивой C<#define SPECIFICATION>.

=item B<-k|--kernel dir>

Указание на директорию, где расположены исходные коды ядра Linux. По умолчанию директория берётся из переменной окружения I<CURRENT_KERNEL> если она задана, иначе используется родительская директория текущей.

=item B<--mname name>

Иногда в директории --module находится несколько модулей. Это можно установить по Makefile. Например, в директории fs/fat/ находятся модули fat vfat msdos. Для того, чтобы указать какой конкретно использовать необходима эта опция. По умолчанию будет использоваться тот модуль, который состоит из большего количества *.c файлов.

=item B<--conf-priority file>

Указать путь до конфигурационного файла приоритетов. По умолчанию используется файл .priority.conf в директории программы или ищется в папке ~/.config.

=item B<--conf-status file>

Указать путь до конфигурационного файла статуса. По умолчанию используется файл .status.conf в директории программы или ищется в папке ~/.config.

=item B<--conf-issues file>

Указать путь до конфигурационного файла проблем. По умолчанию используется файл .issues.conf в директории программы или ищется в папке ~/.config.

=item B<-p|--preprocessed name>

Указание на файл, в котором содержатся уже препроцессированные исходные коды. Данная опция не может указываться одновременно с опцией --sources. Так как они обе задают входные данные. Отличие состоит в том, что --sources указывает на директорию, где хранится множество непрепроцессированных файлов(которые соответствующим образом будут обработаны), а --preprocessed указывает на файл с кодом, где содержится код на чистом C.

=item B<--[no-]cache>

Программа при первом запуске кэширует результаты обработки исходного кода модуля ядра (файл F<.cache/graph_map.cache>). При последующих запусках используются сохранённые результаты. Чтобы программа не использовала их необходимо, задать опцию --no-cache. В таком случае кэш будет обновлён.

=item B<--renew-cache>

Обновить кэш и выйти.

=item B<--format fmt>

Формат графической карты. Поддерживаемые форматы (ps svg svgz fig png gif imap cmapx) соответствуют таковым для программы dot. По умолчанию используется формат svg.

=item B<-o|--output name>

Задаёт имя выходного файла без расширения. По окончании работы программы будет создано два файла: name.dot и name.fmt, где dot - текстовое описание графа, а fmt - формат, заданный опцией --format

=item B<-f|--functions f1,f2 ...>

=item B<-f|--functions f1 f2 ...>

=item B<-f|--functions f1 -f f2 ...>

Даёт возможность вывести не всю карту, а лишь ту её часть, что соответствует заданным именам функций f1,f2... и функциям, которые вызываются ими.

=item B<-r|--[no-]reverse>

Строить карту вверх от указанных функций. На карте будут отображены те функции, которые зависят от указанных. Опция имеет смысл только в том случае, когда используется опция --functions

=item B<-l|--level num>

Отобразить на карте только функции приоритета num с их зависимостями. Уровень приоритета num берётся из файла конфигурации карты. Функции соответствующего приоритета обрабатываются также, как если бы они были явно указаны в аргументе --functions

=item B<--[no-]priority>

Отмечает на карте очереди приоритетов. По умолчанию включено. Очереди приоритетов задаются в файле F<.priority.conf>

=item B<--[no-]done>

Отмечает на карте проверифицированные функции. По умолчанию включено. Список проверифицированных функций задаётся в файле F<.status.conf>

=item B<--[no-]display-done>

По умолчанию включён. Если используется флаг --done и флаг --no-display-done, то проверифицированные функции учитываются, но не отображаются на карте.

=item B<--from-done>

Использовать функции done, specs-only, lemma-proof-required из F<.status.conf> в качестве параметра для аргумента --functions.

=item B<--[no-]issues>

Помечает на карте проблемы. Критерии, в соответствии с которыми необходимо помечать вершины, как и сами метки, задаются в файле F<.issues.conf>

=item B<--[no-]priority-legenda>

Отображать на карте дополнительную информацию по цветовым обозначениям приоритетов. По умолчанию включено.

=item B<--[no-]issues-legenda>

Отображать на карте дополнительную информацию по проблемам. По умолчанию включено.

=item B<--[no-]legenda>

Отображать на карте дополнительную информацию по цветовым обозначениям приоритетов, информацию по проблемам. По умолчанию включено. Объединяет в себе поведение двух опций --[no-]priority-legenda и --[no-]issues-legenda.

=item B<-a|--[no-]mark-anyway>

Функции, которые явно входят в списки приоритетов помечаются на карте особым образом. Однако, если функция из очереди приоритетов вызывается одной из функций, у которой приоритет выше, то первая не получает специальной пометки. Данный флаг задаёт поведение, при котором функции из списка приоритетов помечаются особым образом всегда. По умолчанию выключено.

=item B<-v|--[no-]view>

После работы программы открывает в программе для просмотра изображений созданную карту.

=item B<--open-with exec>

Использует программу exec для просмотра изображений. Если exec не указана, то используется xdg-open.

=item B<--[no-]async>

Запускать внешние программы dot и просмотрщик (--view) в дочернем процессе, не ожидая его завершения. По умолчанию флаг включён.

=item B<--[no-]keep-dot>

Сохранять или нет dot файл после запуска dot программы. По умолчанию файл не сохраняется, если запущен X сервер, иначе - сохраняется.

=item B<--show-available>

Отображать функции, доступные для верификации, исходя из списка проверифицированных к настоящему моменту функций. Аргумент раскрывается в три других аргумента: --reverse --from-done --no-display-done

=item B<-h|--help>

Выводит полное описание программы.

=back

=head1 DESCRIPTION

Успешность проведения верификации кода во многом зависит от чёткой организации и координации процесса работ. Данная программа создана с целью упрощения разработки спецификаций с точки зрения удобства восприятия и изучения структуры кода человеком и является вспомогательным средством для осуществления верификационного процесса. Необходимость его создания возникает из того, что исходные коды модуля ядра не фиксированы, и находятся в разработке, в том числе регулярно подвергаются адаптации под релизы новых версий ядра Linux. Инструмент позволяет вовремя отслеживать изменения, производить адаптацию спецификаций в соответствии с ними. Основное предназначение инструмента состоит в систематизации подхода к решению задачи верификации и стабилизации рабочего процесса.

Существует достаточно большое количество инструментов, позволяющих упростить программисту навигацию по исходному коду. Некоторые из этих инструментов, такие как B<doxygen> и B<cscope> умеют также строить графы вызовов. Однако данные инструменты некорректно работают с кодом модуля ядра. То есть кодом, который является частью большего проекта. С помощью них нельзя построить граф вызов только функций модуля, не включая в него функции ядра. Полный же граф лишь ещё более запутывал бы картину, потому как количество вершин и рёбер в нём не позволяло бы отобразить его разборчиво для человеческого глаза. Также, данные инструменты не имеют возможности вывести весь граф в целом единовременно, а только по частям.

Программа работает с препроцессированными исходными кодами(но имеет возможность автоматически вызвать препроцессор для необработанных исходных кодов), на первой стадии строит индекс всех функций в коде модуля, на второй анализирует вхождение имён функций из индекса в тела функций и строит граф, на третей задаёт дополнительные атрибуты вершинам графа(например, такие как цвет для разметки очередей приоритетов), на четвёртой выводит граф в формате dot. Для построения графического представления используется программа B<dot> из пакета B<graphviz>.

=head1 BUGS

Если в исходных кодах есть функции с одинаковым именем (например, static функции с одинаковым именем в разных файлах), то на карте они сольются в одну. Множества рёбер для них объединятся.

=cut

my $dot_exists = 0;
unless (which('dot')) {
   warn "Please, install graphviz package. This program requires dot to operate properly.\n";
} else {
   $dot_exists = 1;
}

my %args;
$args{kernel_dir}       = undef;
$args{module_dir}       = undef;
$args{mname}            = undef;
$args{functions}        = [];
$args{format}           = 'svg';
$args{out}              = 'graph';
$args{cache_file}       = 'graph_map.cache';
$args{done}             = 1;
$args{display_done}     = 1;
$args{priority}         = 1;
$args{issues}           = 0;
$args{statistics}       = 1;                               # Always print level statistics
$args{mark_anyway}      = 0;
$args{view}             = 1;
$args{async}            = 1;
$args{keep_dot}         = defined $ENV{DISPLAY} ? 0 : 1;
$args{reverse}          = 0;
$args{level}            = undef;
$args{cache}            = 0;
$args{renew_cache}      = 0;
$args{priority_legenda} = 1;
$args{issues_legenda}   = 1;
$args{config}           = undef;
$args{from_done}        = 0;

my $open_with = 'xdg-open';

my $priority = find_config('priority');
my $status   = find_config('status');
my $issues   = find_config('issues');

my @cache_dir = (catdir($ENV{HOME}, '.cache', 'graph'), catdir($FindBin::Bin, '.cache'));
my $help = 0;

GetOptions(
   'functions|f=s{1,}' => \@{$args{functions}},
   'conf-priority=s'   => \$priority,
   'conf-status=s'     => \$status,
   'conf-issues=s'     => \$issues,
   'format=s'          => \$args{format},
   'output|o=s'        => \$args{out},
   'preprocessed|p=s'  => \$args{preprocessed},
   'module|m=s'        => \$args{module_dir},
   'kernel|k=s'        => \$args{kernel_dir},
   'mname=s'           => \$args{mname},
   'cache!'            => \$args{cache},
   'renew-cache'       => \$args{renew_cache},
   'done!'             => \$args{done},
   'from-done'         => \$args{from_done},
   'display-done!'     => \$args{display_done},
   'priority!'         => \$args{priority},
   'issues!'           => \$args{issues},
   'mark-anyway|a!'    => \$args{mark_anyway},
   'view|v!'           => \$args{view},
   'open-with|w=s'     => \$open_with,
   'reverse|r!'        => \$args{reverse},
   'level|l=i'         => \$args{level},
   'async!'            => \$args{async},
   'keep-dot!'         => \$args{keep_dot},
   'priority-legenda!' => \$args{priority_legenda},
   'issues-legenda!'   => \$args{issues_legenda},
   'legenda!'          => sub {$args{priority_legenda} = $args{issues_legenda} = $_[1]},
   'show-available'    => sub {$args{reverse} = $args{from_done} = 1; $args{display_done} = 0;},
   'help|h'            => \$help
) or pod2usage(1);

unless ($dot_exists) {
   $args{view}     = 0;
   $args{keep_dot} = 1;
}

$args{cache} = 0
  if $args{renew_cache};
$args{functions} = [split(/,/, join(',', @{$args{functions}}))];

if ($args{view}) {
   $args{view} = $open_with;
} else {
   $args{view} = undef;
}

pod2usage({-verbose => 2, -exitval => 0}) if $help;
unless ($args{preprocessed}) {
   $args{module_dir} //= $ENV{CURRENT_PROJECT} // '.';
   $args{kernel_dir} //= autodetect_kernel_directory(dirs => ['..']);

   pod2usage({-msg => "You should provide kernel directory with -k option.\n", -exitval => 2})
     unless defined $args{kernel_dir};
   pod2usage({-msg => "$args{module_dir} is not a directory.\n", -exitval => 2}) unless -d $args{module_dir};
   pod2usage({-msg => "$args{kernel_dir} is not a kernel directory.\n", -exitval => 2})
     unless check_kernel_dir($args{kernel_dir});
} else {
   pod2usage({-msg => "$args{preprocessed} file is not readable.\n", -exitval => 2}) unless -r $args{preprocessed};
   pod2usage({-msg => "Either preprocessed flag or sources flag should be specified\n", -exitval => 2})
     if $args{module_dir};
}

if (!@{$args{functions}} && $args{reverse} && !(defined $args{level}) && !$args{from_done}) {
   warn "It's pointless to use --reverse option without --functions\n";
}

if (defined $args{view} && !which($args{view})) {
   die "Can't find program $args{view}.\n";
}

if (!$args{done} && $args{from_done} == 1) {
   die "Flag --from-done should be used in combination with flag --done.\n";
}

if ($args{display_done} == 0 && $args{from_done} && !$args{reverse}) {
   die "It's pointless to use --no-display-done and --from-done.\n";
}

### KERNEL DIRECTORY: $args{kernel_dir}
### MODULE DIRECTORY: $args{module_dir}

$args{cache} = 0 if $args{preprocessed};

{
   my $c = 0;
   foreach (@cache_dir) {
      unless (mkdir($_)) {
         unless (-e $_) {
            warn("Can't create directory $_: $!\n");
            next;
         }
      }

      $args{cache_file} = catfile $_, $args{cache_file};
      $c = 1;
      last;
   }
   die "Can't create cache directory.\n"
     unless $c
}

### CACHE FILE: $args{cache_file}
$args{cache} = 0 unless -r $args{cache_file};

if ($args{priority}) {
   ### CONFIG FILE: $priority
   $priority = load_config $priority;
   die("Can't read priority config file.\n")
     unless $priority;
   die("Wrong file format.\n")
     unless check_priority_format($priority);
   merge_config_keys $args{config}, $priority;
}
if ($args{done}) {
   ### CONFIG FILE: $status
   $status = load_config $status;
   die("Can't read status config file.\n")
     unless $status;
   die("Wrong file format.\n")
     unless check_status_format($status);
   merge_config_keys $args{config}, $status;
}
if ($args{issues}) {
   ### CONFIG FILE: $issues
   $issues = load_config $issues;
   die("Can't read issues config file.\n")
     unless $issues;
   die("Wrong file format.\n")
     unless check_issues_format($issues);
   merge_config_keys $args{config}, $issues;
}

# level checks
if (defined $args{level}) {
   die "Can't handle arguments --functions and --level simultaneously.\n"
     if @{$args{functions}};
   my $level = $args{level};
   my $max   = @{$args{config}{priority}{lists}};
   if ($level <= 0 || $level > $max) {
      die "Level option is out of bounds.\n";
   }
}

run(\%args);    # Can die.

say '';
say "File $args{out}.dot contains graph in dot format." if $args{keep_dot};
say "File $args{out}.$args{format} contains graph in $args{format} format.";
