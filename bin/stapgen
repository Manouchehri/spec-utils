#!/usr/bin/env perl

use utf8;

use feature qw(say);

use strict;
use warnings;
use re '/aa';

use File::Spec::Functions qw(catfile);
use File::Slurp qw(read_file);
use Getopt::Long qw(:config gnu_getopt);
use FindBin;
use lib::abs '../lib';
use Pod::Usage;

use Kernel::Common qw(check_kernel_files_readable autodetect_kernel_directory);

use constant CAPABILITY_C => catfile('security', 'capability.c');

=encoding utf8

=pod

=head1 stapgen

stapgen - Создаёт systemtap скрипт на основе исходного кода ядра, который отслеживает системные вызовы и вызовы LSM интерфейса

=head1 SYNOPSIS

 stapgen [options]

 Options:
  -k|--kernel dir      - директория с исходными кодами ядра
  -v|--verbose         - уровень детализации трассы, 3 уровня
  -c|--caller          - backtrace для функций LSM интерфейса, 0+ уровней
  -s|--[no-]syscalls   - отслеживать системные вызовы, по умолчанию включено
  -f|--[no-]functions  - отслеживать функции в запускаемом процессе, по умолчанию выключено
  -h|--help            - выводит полное описание программы

=head1 OPTIONS

=over 8

=item B<-k|--kernel dir>

Указание на директорию, где расположены исходные коды ядра Linux. По умолчанию директория берётся из переменной окружения I<CURRENT_KERNEL> если она задана.

=item B<-v|--verbose>

Уровень раскрытия аргументов в функциях LSM интерфейса в трассе. Три уровня. 0 - вывод простых типов. 1 - раскрытие указателей, на один шаг. 2 - рекурсивное раскрытие указателей. Аддитивная опция: '-vv' - уровень два. По умолчанию уровень - 0.

=item B<-c|--caller>

Уровень глубины backtrace для функций LSM интерфейса в трассе. Аддитивная опция: '-ccc' - уровень три, в трассу будет выводится backtrace с глубиной 3. По умолчанию уровень 0.

=item B<-s|--[no-]syscalls>

Если опция включена, результирующий скрипт будет отслеживать начало и конец системных вызовов. По умолчанию опция включена.

=item B<-f|--[no-]functions>

Если опция включена, скрипт будет отслеживать вход и выход из функций процесса, на котором запускается мониторинг. По умолчанию опция отключена.

=item B<-h|--help>

Выводит полное описание программы.

=back

=head1 DESCRIPTION

Программа на основе исходных кодов ядра создаёт скрипт для systemtap под конкретную версию ядра. Скрипт предназначен для отслеживания вызовов функций LSM интерфейса ядра. Отслеживание выполняется обязательно только для какого-то конкретного процесса, а не для всей системы в целом. Дополнительно в трассу могут выводиться системные вызовы, функции процесса, точки вызовов LSM интерфейса.

=head1 USAGE EXAMPLE

   ./stapgen -v -cc --kernel /usr/src/linux/ > module.stp
   stap -p 4 -m lsm_trace ./module.stp
   staprun lsm_trace.ko -o lsm.log -c echo

=cut

my $kernel;
my $verbose         = 0;
my $caller_lev      = 0;
my $caller_set      = 0;
my $trace_functions = 0;
my $trace_syscalls  = 1;
my $help            = 0;

GetOptions(
   'kernel|k=s' => sub {
      if (check_kernel_files_readable($_[1], CAPABILITY_C)) {$kernel = $_[1]}
      else {die('Incorrect path to kernel (required files ' . CAPABILITY_C . "): '$_[1]'\n")}
   },
   'verbose|v+' => \$verbose,
   'caller|c'   => sub {
      unless ($caller_set) {$caller_set = 1; $caller_lev = 1}
      else                 {++$caller_lev}
   },
   'syscalls|s!'  => \$trace_syscalls,
   'functions|f!' => \$trace_functions,
   'help|h'       => \$help
) or pod2usage(1);

pod2usage({-verbose => 2, -exitval => 0})
  if $help;

$kernel //= autodetect_kernel_directory(files => [CAPABILITY_C]);

pod2usage(
   {
      -msg     => "Can't find path to linux kernel sources directory (required files " . CAPABILITY_C . ").\n",
      -exitval => 2
   }
) unless $kernel;

sub generate_caller_func
{
   my $level      = $_[0];
   my $ret_header = qq!function caller:string() {\n\treturn sprintf(!;
   my $ret_footer = qq!)\n}\n!;

   my $printf_string    = '';
   my $printf_arguments = '';

   for (my $i = 1; $i <= $level; ++$i) {
      $printf_string    .= '->%s';
      $printf_arguments .= ", symname(stack($i))";
   }
   return $ret_header . qq("$printf_string") . $printf_arguments . $ret_footer;
}

my %configuration;

my $security_c = read_file(catfile($kernel, CAPABILITY_C));

if ($security_c =~ m/security_fixup_ops\s*\(\s*struct\s+security_operations\s*\*ops\s*\)\s*\{([^}]+)\}/m) {
   my $contents = $1;
   while ($contents =~ s/#ifdef\s+(?<conf>\w+)\s+(?<funcs>[^\#]+)\s*#endif//m) {
      my $conf = $+{conf};
      $configuration{$conf} = [map {"cap_$_"} ($+{funcs} =~ m/set_to_cap_if_null\s*\(\s*\w+\s*,\s*(\w+)\s*\);/g)];
   }
   $configuration{'DEFAULT'} = [map {"cap_$_"} ($contents =~ m/set_to_cap_if_null\s*\(\s*\w+\s*,\s*(\w+)\s*\);/g)];
} else {
   die("Can't find security_fixup_ops.\n");
}

my $global = <<'GLOBAL';
global in_syscall

probe begin {
   in_syscall = 0
}
GLOBAL

my $params;

if ($verbose == 0) {
   $params = '$$parms';
} elsif ($verbose == 1) {
   $params = '$$parms$';
} else {
   $params = '$$parms$$';
}

my $callback_macro = <<CBM;
\@define log(fname) %(
\tif ( pid() == target() ) {
\t\tprefix = ""
\t\tif (in_syscall) {
\t\t\tfor(i = 0; i < in_syscall; ++i)
\t\t\t\tprefix .= "\\t"
\t\t} else {
\t\t\tprefix .= "* "
\t\t}
\t\tprintf("%s%s: %s %d %s params: %s\\n", prefix, \@fname, execname(), pid(), caller(), $params)
\t}
%)
CBM

my $header = "\n" . $global . "\n\n" . generate_caller_func($caller_lev) . "\n" . $callback_macro;

my $body = '';

foreach (keys %configuration) {
   my $acc = "probe";

   foreach (@{$configuration{$_}}) {
      $acc .= qq!\tkernel.function("${_}"),\n!;
   }
   $acc =~ s/,(?=\n$)//;

   $acc .= qq!{\n\t\@log(ppfunc())\n}\n\n!;

   if ($_ =~ m/^CONFIG_/) {
      $acc = qq!%( $_ == "y" %?\n! . ($acc =~ s/^/\t/mgr);
      $acc .= "%)\n\n";
   }

   $body .= $acc;
}

my $syscall_probe = <<PROBE;
probe syscall.* {
\tif (pid() == target()) {
\t\tprefix = ""
\t\tif (in_syscall) {
\t\t\tfor(i = 0; i < in_syscall; ++i)
\t\t\t\tprefix .= "\\t"
\t\t} else {
\t\t\tprefix .= "\\n"
\t\t}
\t\tprintf("%s<syscall %s: %s(%s)\\n", prefix, execname(), name, argstr)
\t\tin_syscall++
\t}
}
PROBE

my $syscall_return_probe = <<PROBE;
probe syscall.*.return {
\tif (pid() == target()) {
\t\tin_syscall--
\t\tprefix = ""
\t\tsuffix = ""
\t\tif (in_syscall) {
\t\t\tfor(i = 0; i < in_syscall; ++i)
\t\t\t\tprefix .= "\\t"
\t\t} else {
\t\t\tsuffix .= "\\n"
\t\t}
\t\tprintf("%s>syscall ret %s: %s result: %s%s\\n", prefix, execname(), name, retstr, suffix)
\t}
}
PROBE

my $process_functions = <<PROBE;
probe process.function("*") {
\tif (pid() == target()) {
\t\tprintf("<<function %s: %s\\n", execname(), ppfunc())
\t}
}
PROBE

my $process_functions_return = <<PROBE;
probe process.function("*").return {
\tif (pid() == target()) {
\t\tprintf(">>function ret %s: %s\\n", execname(), ppfunc())
\t}
}
PROBE

my $footer = '';

$footer .= ($syscall_probe . "\n" . $syscall_return_probe . "\n")         if $trace_syscalls;
$footer .= ($process_functions . "\n" . $process_functions_return . "\n") if $trace_functions;

#print $header . "\n\n" . $body . "\n\n" . $footer;
print $header . "\n\n" . $body . "\n" . $footer;

