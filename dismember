#!/usr/bin/env perl

use warnings;
use strict;

use feature qw(say);
use re '/aa';

use Getopt::Long qw(:config gnu_compat no_bundling no_permute no_getopt_compat);
use File::Spec::Functions qw(catfile catdir);
use Storable;

use FindBin;
use lib catdir $FindBin::Bin, 'lib';

use Local::Kernel::Common qw(check_kernel_dir autodetect_kernel_directory);
use Local::Kernel::Module qw(parse_sources);
use Local::Kernel::Module::Graph qw(
   build_sources_graph
   get_predecessors_subgraph
   output_sources_graph
);

BEGIN {
   eval {
      require Smart::Comments;
      Smart::Comments->import();
   }
}

my @functions;
my $all_flag = 0;
my $module_dir = $ENV{CURRENT_PROJECT} // '.';
my $kernel_dir;

#cache options
my $cache = 0;
my $output_dir = catdir $FindBin::Bin, 'result';
my @cache_dir  = (catdir($ENV{HOME}, '.cache/dismember'), catdir($FindBin::Bin, '.cache'));
my @cache_file = (undef, 'kernel.cache', 'kernel_module.cache');

my $single_file = 0;
my $size_t_workaround = 0;
my $remove_fields = 0;

GetOptions(
   'all|a!'                =>  \$all_flag,
   'functions|f=s{1,}'     =>  \@functions,
   'module|m=s'            =>  \$module_dir,
   'kernel|k=s'            =>  \$kernel_dir,
   'cache|c:2'             =>  \$cache,
   'single|s!'             =>  \$single_file,
   'remove-fields|r!'      =>  \$remove_fields,
   'size_t|workaround|w!'  =>  \$size_t_workaround
) or die "Incorrect usage!\n";

@functions = split(/,/,join(',',@functions));

$kernel_dir //= autodetect_kernel_directory();

die("You should provide at least one function name.\n") if !@functions && !$all_flag;
die("$module_dir is not a directory.\n") unless -d $module_dir;
die("You should provide proper kernel directory with --kernel option\n") unless check_kernel_dir($kernel_dir);

### KERNEL DIRECTORY: $kernel_dir
### MODULE DIRECTORY: $module_dir

sub create_directory
{
   unless (mkdir($_[0])) {
      unless (-e $_[0]) {
         warn("Can't create directory $_[0]: $!\n");
         return 1
      }
   }

   0
}

create_directory $output_dir;

{
   my $c = 0;
   foreach my $dir (@cache_dir) {
      unless (create_directory($dir)) {
         @cache_file = map { defined $_ ? catfile($dir, $_) : $_ } @cache_file;
         $c = 1;
         last
      }
   }
   die "Can't create directory for cache.\n"
      unless $c
}

$cache = 2 if $cache > 2;
$cache = 0 if $cache && ! -r $cache_file[$cache];


### CACHE OPTIONS:
###   use:   $cache
###   file:  @cache_file
goto CACHED_GRAPH
   if $cache == 2;

### PARSING SOURCES...
my %sources = parse_sources($kernel_dir, $module_dir, ["#define SPECIFICATION 1\n"], !$cache);

### BUILDING SOURCES GRAPH...
my $g = build_sources_graph(\%sources, {cache => {use => $cache, file => $cache_file[1]}});
$g->set_graph_attribute('comments', $sources{comments});
$g->set_graph_attribute('index', $sources{module}{function}->index);


CACHED_GRAPH:
if ($cache == 2) {
   $g = retrieve($cache_file[2])
} else {
   store($g, $cache_file[2])
}

if ($size_t_workaround) {
   foreach($g->vertices) {
      if ($g->get_vertex_attribute($_, 'object')->name eq 'size_t') {
         $g->delete_vertex($_);
         last
      }
   }
}

{
   my $indx = $g->get_graph_attribute('index');

   if ($all_flag) {
      @functions = keys $indx
   }

   foreach my $function (@functions) {
      unless (exists $indx->{$function}) {
         warn "Function $function doesn't exist in module.\n";
         next
      }
      my $id = $indx->{$function};

      my $fd = catfile $output_dir, $function;
      create_directory $fd;

      ### GENERATING SUBGRAPH FOR FUNCTION: $function
      my $g2 = get_predecessors_subgraph($g, $id);

      ### WRITING RESULTS TO DISK
      print
      "###   OUTPUT: " . ($single_file ? catfile($fd, 'module.c') : $fd) . "\n";
      output_sources_graph($g2, $fd, $single_file, $remove_fields);
   }
}



