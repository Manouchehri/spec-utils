#!/usr/bin/env perl

use warnings;
use strict;

use feature qw/switch say/;
no if $] >= 5.018, warnings => "experimental::smartmatch";
use re '/aa';

use Pod::Usage;
use List::Util qw(any);
use Getopt::Long qw(:config gnu_compat no_getopt_compat pass_through);
use File::Spec::Functions qw(catfile catdir);
use File::Which;
use Storable;
use POSIX qw/setsid/;
use Module::Loader;
use Try::Tiny;

use FindBin;
use lib::abs 'lib';

use Local::List::Util qw(difference);
use Local::Config qw(find_config);
use Local::Terminal qw(window_size);
use Kernel::Common qw(check_kernel_dir autodetect_kernel_directory);
use Kernel::Module qw(parse_sources);
use Kernel::Module::Graph qw(
   build_sources_graph
   get_predecessors_subgraph
   output_sources_graph
);

BEGIN {
   eval {
      require Smart::Comments;
      Smart::Comments->import();
   }
}

=encoding utf8

=pod

=head1 dismember

dismember - программа для выборки из общего набора исходных кодов ядра и модуля ядра минимального объёма кода для конкретной функции с зависимостями, достаточного для компиляции в объектный файл

=head1 SYNOPSIS

 dismember [options]

 Options:
  -k|--kernel dir      - директория с исходными кодами ядра
  -m|--module dir      - директория с исходными кодами модуля

  -f|--functions f1 -f f2 ...
  -f|--functions f1,f2,...
  -f|--functions f1 f2 ...    - построить выборки для функций f1,f2,...
  -a|--all                    - построить выборки для всех функций модуля ядра
  -s|--single                 - поместить все зависимости функции -f в единый файл
  -r|--remove-fields          - адаптивно убрать неиспользуемые поля из enum

  -c|--cache num - три уровня кэша:
                      0 - отсутствует,
                      1 - ядро не менялось,
                      2 - ядро и модуль ядра не менялись
  -e|--editor    - по окончании работы программы запустить редактор (EDITOR)

  -h|--help    - выводит полное описание программы

=head1 OPTIONS

=over 8

=item B<-m|--module dir>

Указание на директорию, где расположены исходные коды модуля ядра. По умолчанию директория берётся из переменной окружения I<CURRENT_SOURCES> если она задана, иначе используется текущая директория. Данные исходные коды в дальнейшем будут препроцессированы с директивой C<#define SPECIFICATION>.

=item B<-k|--kernel dir>

Указание на директорию, где расположены исходные коды ядра Linux. По умолчанию директория берётся из переменной окружения I<CURRENT_KERNEL> если она задана.

=item B<-f|--functions f1,f2 ...>

=item B<-f|--functions f1 f2 ...>

=item B<-f|--functions f1 -f f2 ...>

Строить выборку для функций модуля ядра f1,f2,... Обязательная опция. Допускает несколько функций в качестве аргумента. Программа обрабатывает каждую функцию из списка аргументов так, как если бы она последовательно запускалась на каждой функции отдельно.

=item B<-a|--all>

Если флаг all включён, программа строит выборку для всех функций из модуля ядра. В таком случае опция --functions не обязательна. Флаг all необходим, главным образом, для целей тестирования.

=item B<-s|--single>

Результирующий редуцированный набор исходных кодов размещается в нескольких файлах. Флаг --single убирает это разделение по файлам и выводит всё в один файл module.c

=item B<-r|--remove-fields>

Убрать неиспользуемые константы из определений enum. Значения остальных изменяются так, чтобы соответствовать оригинальному определению.

=item B<-c|cache num>

Опция указывает кэш какого уровня использовать. По умолчанию кэширование отключено и исходные коды модуля и ядра каждый раз анализируются заново. Если выполняется разбор исходных кодов, кэшированная версия не используется, то результаты анализа сериализуются и сохраняются для возможного последующего использования в качестве кэша. Уровни num: 0 - кэш не используется; 1 - используется кэш, связанный с исходными кодами ядра (в исходных кодах модуля не должны меняться подключаемые заголовки, исходный код ядра не должен меняться, в обратном случае будет наблюдаться расхождение между результатом работы программы с кэшированием и без кэширования); 2 - используется результаты кэширования как разбора исходных кодов ядра, так и исходных кодов модуля ядра (код ядра, код модуля ядра должны оставаться неизменными с прошлого запуска программы)

=item B<-e|editor>

Запустить редактор по окончании работы программы. Открываются файлы module.c для всех функций опции --functions. Используется редактор из переменной окружения EDITOR.

=item B<-h|--help>

Выводит полное описание программы.

=back

=head1 DESCRIPTION

В качестве входных данных программа получает наборы исходных кодов ядра Linux и модуля ядра Linux (для корректной работы версии должны соответствовать друг другу, модуль должен собираться под данное ядро), через аргументы комадной строки указывается одна из функций модуля ядра. В процессе работы программа осуществляет препроцессинг и разбор исходных кодов. Строится ориентированный граф зависимостей функций, структур и т.д. После того как граф построен, он урезается до собственного подграфа, построенного от указанной функции. На следующей стадии осуществляется вывод вершин графа с определениями из исходных кодов структур, функций и т.д. в детерминированном порядке в четыре файла(один, если указана опция --single): extern.h(декларации функций ядра)  kernel.h(определения из ядра)  module.c(функции из модуля ядра)  module.h (определения структур, макросы и т.д. из модуля)

=cut


my @functions;

#cache options
my $cache = 0;
my @cache_dir  = (catdir($ENV{HOME}, '.cache', 'dismember'), catdir($FindBin::Bin, '.cache'));
my @cache_file = (undef, 'kernel.cache', 'kernel_module.cache');

my %config;
my $config_file;
GetOptions(
   'config=s' => \$config_file,
) or pod2usage(1);

$config{all}                 = 0;
$config{single}              = 0;
$config{'remove-fields'}     = 0;
$config{module}              = $ENV{CURRENT_PROJECT} // '.';
$config{kernel}              = undef;
$config{output_dir}          = catdir $FindBin::Bin, 'result';
$config{editor}              = 0;
$config{plugin}              = [];

if ($config_file && -r $config_file || (defined ($config_file = find_config()))) {
   ### CONFIG FILE: $config_file
   open(my $conf, '<', $config_file);
   while (<$conf>) {
      chomp;
      next if m/\A\h*+#/;
      next if m/\A\h*+\Z/;

      if (m/\A([\w-]++)\h*+=\h*+(.*?)\h*\Z/) {
         if (exists $config{$1}) {
            if (ref $config{$1} eq 'ARRAY') {
               push @{$config{$1}}, $2
            } else {
               $config{$1} = $2
            }
         } else {
            unshift @ARGV, "--$1=$2";
         }
      } else {
         warn "Wrong config format in line $.: '$_'\n"
      }
   }
   close($conf);
}

my $help = 0;

GetOptions(
   'all|a!'                =>  \$config{all},
   'functions|f=s{1,}'     =>  \@functions,
   'module|m=s'            =>  \$config{module},
   'kernel|k=s'            =>  \$config{kernel},
   'cache|c:2'             =>  \$cache,
   'single|s!'             =>  \$config{single},
   'remove-fields|r!'      =>  \$config{'remove-fields'},
   'editor|e!'             =>  \$config{editor},
   'plugin=s@'             =>  \$config{plugin},
   'help|h'                =>  \$help
) or pod2usage(1);
@functions = split(/,/, join(',', @functions));
$config{functions} = \@functions;
$config{plugin} = [ split(/,/, join(',', @{$config{plugin}})) ];

pod2usage({-verbose => 2, -exitval => 0})
    if $help;

$config{kernel} //= autodetect_kernel_directory();

pod2usage({ -msg => "You should provide at least one function name.\n", -exitval => 2 })
    if !@functions && !$config{all};
pod2usage({ -msg => "Can't use --all flag with --functions simultaneously.\n", -exitval => 2 })
    if @functions && $config{all};
pod2usage({ -msg => "$config{module} is not a directory.\n", -exitval => 2 })
    unless -d $config{module};
pod2usage({ -msg => "You should provide proper kernel directory with --kernel option\n", -exitval => 2 })
    unless check_kernel_dir($config{kernel});

### KERNEL DIRECTORY: $config{kernel}
### MODULE DIRECTORY: $config{module}

my @plugins;
my %level = (full_graph => 1, reduced_graph => 2, raw_data => 3, pre_output => 4, post_output => 5);
if (@{$config{plugin}}) {
   my $loader  = Module::Loader->new(max_depth => 1);
   my %pmap = map {lc(substr($_, rindex($_, ':') + 1)), $_} $loader->search('App::Dismember::Plugin');
   foreach my $p (@{$config{plugin}}) {
      if (any {$p eq $_} keys %pmap) {
         ### LOADING PLUGIN: $p
         my $plugin = $pmap{$p};
         $loader->load($plugin);

         foreach (qw/level action process_options/) {
            unless (eval { $plugin->can($_) }) {
               die "plugin $p $plugin: doesn't have method '$_'\n"
            }
         }

         # process_options should be called first
         my $obj = $pmap{$p}->process_options(\%config, \@plugins);

         my %lvl = $obj->level;
         foreach (keys %lvl) {
            unless (defined $lvl{$_}) {
               die "plugin $p: level priority is not specified\n"
            }
            unless (exists $level{$_}) {
               die "plugin $p: unknown level\n"
            }
            unless ($lvl{$_} >= 0 && $lvl{$_} < 100) {
               die "plugin $p: only priority levels 0..99 supported\n"
            }
         }

         push @plugins, $obj;
      } else {
         die "There is no plugin: $p\n"
      }
   }
}

my %schedule;
foreach my $p (@plugins) {
   my %l = $p->level;
   foreach (keys %l) {
      my $pr = $l{$_};
      if (exists $schedule{$_}{$pr}) {
         die "Can't use plugin " . (ref $p) . " and " . (ref $schedule{$_}{$pr}) . " combined.\n"
      }
      $schedule{$_}{$pr} = $p;
   }
}
foreach my $l (keys %schedule) {
   $schedule{$l} = [ map {$schedule{$l}{$_}} sort keys %{$schedule{$l}} ]
}

if (@ARGV) {
   pod2usage({ -msg => "Unknown options: " . join("\n", @ARGV) . "\n", -exitval => 2 })
}

sub create_directory
{
   unless (mkdir($_[0])) {
      unless (-e $_[0]) {
         warn("Can't create directory $_[0]: $!\n");
         return 1
      }
   }

   0
}

create_directory $config{output_dir};

{
   my $c = 0;
   foreach my $dir (@cache_dir) {
      unless (create_directory($dir)) {
         @cache_file = map { defined $_ ? catfile($dir, $_) : $_ } @cache_file;
         $c = 1;
         last
      }
   }
   die "Can't create directory for cache.\n"
      unless $c
}

$cache = 2 if $cache > 2;
$cache = 0 if $cache && ! -r $cache_file[$cache];

### CACHE OPTIONS:
###   use:   $cache
###   file:  @cache_file
goto CACHED_GRAPH
   if $cache == 2;

### PARSING SOURCES...
my %sources = parse_sources($config{kernel}, $config{module}, ["#define SPECIFICATION 1\n"], !$cache);

### BUILDING SOURCES GRAPH...
my $g = build_sources_graph(\%sources, {cache => {use => $cache, file => $cache_file[1]}});
$g->set_graph_attribute('comments', $sources{comments});
$g->set_graph_attribute('index', $sources{module}{function}->index);


CACHED_GRAPH:
if ($cache == 2) {
   $g = retrieve($cache_file[2])
} else {
   store($g, $cache_file[2])
}


print "\n";

sub call_plugins
{
   my %opts = (@_, config => \%config);
   my $res = 0;

   if (exists $schedule{$opts{level}}) {
      foreach my $plugin (@{$schedule{$opts{level}}}) {
         try {
            $plugin->action(\%opts)
         } catch {
            when (/^FAIL:/) { die $_ };
            default { $res = 1; warn "plugin " . (ref $plugin) . " fails at level $opts{level} with message:\n$_\n" }
         };
      }
   }

   $res
}

call_plugins level => 'full_graph', graph => $g;


my $indx = $g->get_graph_attribute('index');

sub generate_files ($$)
{
   my ($graph, $function) = @_;
   my $id = $indx->{$function};

   my $fd = catdir $config{output_dir}, $function;
   create_directory $fd;

   my $rgraph = get_predecessors_subgraph($graph, $id);
   call_plugins
      level => 'reduced_graph',
      graph => $rgraph;

   output_sources_graph($rgraph, $fd,
                                 $config{single},
                                 $config{'remove-fields'},
                                 sub {
                                    call_plugins function => $function, graph => $rgraph, @_
                                 }
                        );
   print "OUTPUT: " . ($config{single} ? catfile($fd, 'module.c') : $fd) . "\n\n";

   {dir => $fd}
}

{
   my $i = 1;
   my (undef, $col) = window_size();
   my $msg = "GENERATING SUBGRAPH FOR FUNCTION: ";
   my $total = 0;

   unless ($config{all}) {
      # Arguments check
      @functions = grep {
            if (exists $indx->{$_}) { 1 }
            else { warn "Function $_ doesn't exist in module.\n"; 0 }
         } @functions;
      $total = @functions;
      my $reserved_colons = length($msg) + length($total) + 3;

      foreach (@functions) {
         my $spaces = $col - $reserved_colons - length($_) - length($i);
         print $msg . $_ . ' ' x $spaces . "[" . $i++ . "/$total]\n";
         my $output = generate_files $g, $_;
         call_plugins level => 'post_output', %$output;
      }
   } else {
      $total = keys %$indx;
      my $reserved_colons = length($msg) + length($total) + 3;

      my @edges;
      my %rindx = reverse %$indx;
      my $subgraph = Graph::Directed->new(
                        edges    => [ map {
                                             grep {
                                                exists $rindx{$_->[1]}
                                             } $g->edges_from($_)
                                      } values %$indx ],
                        vertices => [ values %$indx ]
                     );
      my %vertices = map { ($_ => 0) } $subgraph->vertices;

      while ($subgraph->has_a_cycle) {
         my @cycle = $subgraph->find_a_cycle();
         if (@cycle == 1) {
            $subgraph->delete_edge(@cycle[0,0])
         } else {
            $subgraph->delete_edge(@cycle[0,1])
         }
      }

      my %vd  = map { ($_, $subgraph->in_degree($_)) } keys %vertices;
      my @all_failed;
      while (%vertices) {
         my @zv;

         foreach(keys %vertices) {
            push @zv, $_ if 0 == $vd{$_};
         }

         unless (@zv) {
            warn "There is no possibility to continue. All available functions was generated.\n";
            warn "Plugins execution fail:\n\t" . join("\n\t", map {$rindx{$_}} @all_failed) . "\n";
            print "\n\n";
            warn "Failed to generate:\n\t" . join("\n\t", map {$rindx{$_}} keys %vertices) . "\n";
            last;
         }

         my @fail;
         foreach (sort @zv) {
            my $function = $rindx{$_};
            my $spaces = $col - $reserved_colons - length($function) - length($i);
            print $msg . $function . ' ' x $spaces . "[" . $i++ . "/$total]\n";
            my $output = generate_files $g, $function;
            if (call_plugins(level => 'post_output', %$output)) {
               push @fail, $_
            }
         }
         push @all_failed, @fail;

         foreach (@fail, $subgraph->all_successors(@fail)) {
            $vd{$_} = -1;
         }

         # @zv / @fail
         @zv = difference \@zv, \@fail;
         --$vd{$_->[1]} foreach $subgraph->edges_from(@zv);
         delete @vertices{@zv};
      }
   }
}

if ($config{editor}) {
   if (which($ENV{EDITOR})) {
      my @exec = ($ENV{EDITOR});
      foreach (@functions) {
         push @exec, catfile($config{output_dir}, $_, 'module.c')
      }

      if ($#exec > 0) {
         my $pid = fork();
         die "can't fork: $!"
            unless defined $pid;
         if ($pid) {
            print "$pid\n";
            exit 0;
         }

         setsid();
         exec(@exec);
      } else {
         warn "EDITOR will not be started since there is no files to work with.\n"
      }
   } else {
      die "Can't find application from EDITOR env variable.\n"
   }
}
