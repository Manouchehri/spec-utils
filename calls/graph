#!/usr/bin/env perl

use common::sense;

use Graph;
use Graph::Writer::Dot;

use File::Slurp qw(read_file write_file);
use Getopt::Long qw(:config gnu_getopt);
use File::Find;


my $function;
my $format = 'png';
my $out = 'graph';
my $source_dir = $ENV{PARSEC_SOURCES_PATH} // '.';
my $preprocessed;

GetOptions(
   'function|f=s'     =>  \$function,
   'format=s'         =>  \$format,
   'output|o=s'       =>  \$out,
   'preprocessed|p=s' =>  \$preprocessed,
   'sources|s=s'      =>  \$source_dir,
) or die "Incorrect usage!\n";


sub remove_strings {
   $_[0] =~ s/(?<!\\|')"(?:[^\\"]+|\\.)*"/""/mg;
}

sub remove_comments
{
   $_[0] =~ s#/\*[^*]*\*+([^/*][^*]*\*+)*/|//([^\\]|[^\n][\n]?)*?\n|("(\\.|[^"\\])*"|'(\\.|[^'\\])*'|.[^/"'\\]*)#defined $3 ? $3 : ""#gse;
}

sub add_files
{
	my @files;
	my $source = '';
	my ($path, $mask) = @_;

	find(sub { push @files, $File::Find::name if m/\Q${mask}\E$/ }, $path);

   @files = sort @files;

	foreach (@files) {
		$source .= read_file($_);
	}
	return \$source;
}

sub get_list_of_calls
{
   my @calls;

   while (
      $_[0] =~
         m/
            \b(?<fname>\w+)
            \s*
            (?<fargs>\((?:(?>[^\(\)]+)|(?&fargs))*\))
            (?!\s*(?:\{|\()) # исключает функции которые ни разу не вызываются
         /gmx
   ) {
      # Просматриваем ещё раз аргументы вызова прошлой функции.
      # Там могут быть ещё вызовы.
      # -1 - первая скобка после имени не учитывается.
      my $offset = pos($_[0]) - (length($+{fargs}) - 1);

      my $call = $+{fname};
      #$call = $+{fname} . $+{fargs} if length $+{fname} <= 1;
      $call =~ s/\n/ /mg;
      $call =~ s/\s+/ /g;
      $call =~ s/^\s//g;
      $call =~ s/\s$//g;
      push @calls, $call;

      pos($_[0]) = $offset;
   }

   #filter
   @calls = grep { ! m/^(
                        (for)|
                        (if)|
                        (while)|
                        (switch)|
                        (sizeof)|
                        (return)|
                        (typeof)|
                        (case)|
                        (else)|
                        (defined)|
                        (__attribute__)|
                        (__typeof__)|
                        (volatile)|
                        (asm)|
                        (__builtin_.+)|
                        (__section__)|
                        (section)|
                        (alias)|
                        (aligned))$/x } @calls;

   return @calls;
}


# pr list init

my %colormap;
my $curr_color;
my $cnt = 0;
my @colorlist;

my $priority_list = 'priority_list.txt';
my @pr = read_file($priority_list, chomp => 1);
foreach (@pr) {
   next if !$_;

   if (m/<(\w+)>/) {
      $curr_color = $1;
      ++$cnt;
      push @colorlist, $curr_color;
      next;
   }

   $colormap{$_} = [$cnt, $curr_color];
}

# read sources
my $source;
if ($preprocessed) {
   $source  = read_file($preprocessed);
} else {
   $source  = ${ add_files $source_dir, '.h' };
   $source .= ${ add_files $source_dir, '.c' };
}
remove_comments($source);
remove_strings($source);

#funcs init
my %cg;

my $ret  = qr'';
my $name = qr'(?<name>[a-zA-Z]\w*)';
my $args = qr'(?>(?<args>\((?:(?>[^\(\)]+)|(?&args))*\)))';
my $body = qr'(?>(?<fbody>\{(?:(?>[^\{\}]+)|(?&fbody))*\}))';

while ( $source =~ m/$ret\s*+$name\s*+$args\s*+$body/gmx ) {
   my ($name, $body) = ($+{name}, $+{fbody});
   next if $name =~ m/^((for)|(if)|(while)|(switch))$/x;

   if (!exists $cg{$name}) {
      $cg{$name} = [ get_list_of_calls($body) ];
   } else {
      warn "$name already parsed\n";
   }
}

#graph
my $graph = Graph->new();
my @funcs = keys %cg;

foreach my $root (@funcs) {
   my @v = @{ $cg{$root} };

   my %hash;
   @v = grep {$_ && !$hash{$_}++} @v;

   foreach (@v) {
      $graph->add_edge($root, $_) if $_ ~~ @funcs;
   }
}

sub get_subgraph_vertices
{
   my @vertices;
   my @edges;
   my @check;

   @edges = $graph->edges_from($_[0]);
   push @vertices, map { $$_[1] } @edges;
   push @check, $_[0];

   while (1) {
      my $v = shift @vertices;

      last if !$v;
      next if $v ~~ @check;

      @edges = $graph->edges_from($v);
      push @vertices, map { $$_[1] } @edges;
      push @check, $v;
   }

   @check;
}

foreach (sort {$colormap{$a}[0] <=> $colormap{$b}[0]} grep {$graph->has_vertex($_)} keys %colormap) {
   my @subgraph;
   my $color = $colormap{$_}[1];

   $graph->set_vertex_attributes($_, { style => 'filled', fillcolor => $color, shape => 'tripleoctagon' } );

   foreach my $v (get_subgraph_vertices($_)) {
      if (!$graph->has_vertex_attribute($v, 'fillcolor')) {
         $graph->set_vertex_attributes($v, { style => 'filled', fillcolor => $color } );
      }
   }
}

foreach($graph->vertices) {
   $graph->set_vertex_attribute($_, shape => 'octagon') if !$graph->out_degree($_);
}

if ($function) {
   my @svertices = get_subgraph_vertices($function);
   $graph->delete_vertices( grep { ! ($_ ~~ @svertices) } $graph->vertices );
}


my $writer = Graph::Writer::Dot->new();
$writer->write_graph($graph, "$out.dot");

my @legenda;

my @dot = read_file("$out.dot");
push @legenda, qq(  subgraph "cluster_legenda" {\n);
push @legenda, qq(    style = "filled";\n);
push @legenda, qq(    color = "lightgrey";\n);
push @legenda, qq(    label = "Legenda";\n);
push @legenda, qq(    node [shape = "box", style = "filled"];\n);
push @legenda, qq(    "1" -> "2" -> "3" -> "4" -> "5" [ style = "invis" ];\n);
while (my ($idx, $color) = each @colorlist) {
   ++$idx;
   push @legenda, qq(    "$idx" [fillcolor = "$color"];\n);
}
push @legenda, qq(  }\n);

splice @dot, 2, 0, @legenda;
write_file("$out.dot", @dot);

system("dot -T$format $out.dot -o $out.$format");

