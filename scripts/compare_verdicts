#!/usr/bin/env perl

use strict;
use warnings;

use File::Slurp qw(read_file);

if (@ARGV != 2) {
   die "Usage: $0 old_verdicts.txt new_verdicts.txt\n";
}

my $old = $ARGV[0];
my $new = $ARGV[1];

unless (-f $old && -r _) {
   die "Can't read file $old\n"
}

unless (-f $new && -r _) {
   die "Can't read file $new\n"
}

sub parse_verdicts ($)
{
   my ($file) = @_;
   my %verdicts;

   foreach (read_file $file) {
      chomp;
      if (m/^VERDICT:\h++
         (?<name>\w++)\h++
         (?<status>
            INSTRUMENT\h++FAIL|
            (?:UN)?PROVED|
            NOSPEC|
            PARTIALLY\h++PROVED)\h*+
         (?:\((?<proved>\d++)\h*+\/\h*+(?<total>\d++)\h*+\)\h*+)?
         $/x) {
         my ($name, $status, $proved, $total) = @+{qw(name status proved total)};
         $verdicts{$name} = {
            status => $status,
            ($proved ?
               (
                  proved => $proved,
                  total  => $total
               )
               :
               ()
            )
         };
      } else {
         die "Can't parse status line '$_'\n";
      }
   }

   return \%verdicts;
}

our %STATUS = (
   'INSTRUMENT FAIL'  => -1,
   'NOSPEC'           => 0,
   'UNPROVED'         => 1,
   'PARTIALLY PROVED' => 2,
   'PROVED'           => 3
);

my %old_verdicts = %{parse_verdicts($old)};
my %new_verdicts = %{parse_verdicts($new)};

my @unknown_prev_status;
my @fails;
my @downgrade;
my @success;
foreach my $fname (keys %new_verdicts) {
   my $newf = $new_verdicts{$fname};
   my $oldf = $old_verdicts{$fname};

   unless ($oldf) {
      push @unknown_prev_status, $fname;
      $oldf = {status => 'INSTRUMENT FAIL'};
   }

   if ($STATUS{$newf->{status}} <= 0) {
      push @fails, "Function $fname failed with status $newf->{status}";
   }

   my $old_status = $STATUS{$oldf->{status}};
   my $new_status = $STATUS{$newf->{status}};

   if ($new_status < $old_status) {
      my $line = "$fname from $oldf->{status} to $newf->{status}";
      if (exists $newf->{proved}) {
         $line .= " ($newf->{proved}/$newf->{total})";
      }
      push @downgrade, $line;
   } elsif ($old_status == $new_status) {
      if ($old_status == $STATUS{'PARTIALLY PROVED'}) {
         my $old_ratio = $oldf->{proved} / $oldf->{total};
         my $new_ratio = $newf->{proved} / $newf->{total};
         my $eq_total = $oldf->{total} == $newf->{total};
         if ($eq_total && ($new_ratio < $old_ratio) || !$eq_total) {
            push @downgrade, "$fname from $oldf->{status} ($oldf->{proved}/$oldf->{total}) to ($newf->{proved}/$newf->{total})";
         }
      }
   } else {
      my $old_count = exists $oldf->{proved} ? "($oldf->{proved}/$oldf->{total}) " : '';
      my $new_count = exists $newf->{proved} ? "($newf->{proved}/$newf->{total})" : '';
      my $line = "$fname from $oldf->{status} ${old_count}to $newf->{status} $new_count";
      push @success, $line;
   }
}

my $ret = 0;

if (@success) {
   print "Verification upgrade:\n" . join("\n", @success) . "\n\n";
}

if (@unknown_prev_status) {
   warn "Unknown old status for functions:\n" . join("\n", @unknown_prev_status) . "\n\n";
   $ret = 1;
}

if (@fails) {
   warn "Failed runs on functions:\n" . join("\n", @fails) . "\n\n";
   $ret = 2;
}

if (@downgrade) {
   warn "Verification downgrade:\n" . join("\n", @downgrade) . "\n";
   $ret = 3;
}

exit $ret;
